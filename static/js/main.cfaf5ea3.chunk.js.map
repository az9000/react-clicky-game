{"version":3,"sources":["components/Card/index.js","components/CardList/index.js","components/Header/index.js","components/Footer/index.js","utils/utility.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","name","src","image","onClick","handleClick","style","CardList","chars","map","character","index","key","id","imageStyle","headerMessageStyle","color","fontSize","marginTop","marginBottom","Header","title","styleChange","newMessageStyle","message","score","totalScore","Footer","shuffle","array","temp","i","length","j","Math","floor","random","Content","state","messageStyle","newCharacters","animation","clicked","characters","splice","this","setState","console","log","event","preventDefault","target","tempClicked","tempScore","newImageStyle","indexOf","concat","slice","tempTotalScore","animationIterationCount","setTimeout","role","bind","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfaf5ea3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Card(props) {\r\n\r\n    return (\r\n        <div className=\"col-3 mb-3\">        \r\n          <img alt={props.name} src={props.image} onClick={props.handleClick} style={props.style} />          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from '../Card/index';\r\n\r\nfunction CardList(props) {\r\n  return (\r\n    <div className=\"row mb-3\">    \r\n      {props.chars.map((character, index) => {\r\n        return (\r\n          <Card\r\n            key={character.id}\r\n            name={character.name}\r\n            image={character.image}\r\n            style={props.imageStyle}\r\n            handleClick={props.handleClick}            \r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst headerMessageStyle = {\r\n  color: \"lightblue\",\r\n  fontSize: \"35px\",\r\n  marginTop: \"auto\",\r\n  marginBottom: \"auto\"\r\n};\r\n\r\nfunction Header(props) {\r\n  return (\r\n    <header>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-4\" id=\"header-title\">\r\n            <span className=\"align-middle\">{props.title}</span>\r\n          </div>\r\n          <div\r\n            className=\"col-4\"\r\n            style={props.styleChange ? props.newMessageStyle : headerMessageStyle}\r\n          >\r\n            {props.message}\r\n          </div>\r\n          <div className=\"col-4\" id=\"header-score\">\r\n            Score: {props.score} | Total Score: {props.totalScore}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Footer(props) {\r\n  return (\r\n    <footer className=\"footer\" id=\"my-footer\">\r\n      <div className=\"container\">\r\n        <span>footer</span>\r\n      </div>\r\n    </footer>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","function shuffle(array) {\r\n    let temp;\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\r\n      // swap elements array[i] and array[j]\r\n      temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nexport default shuffle;","import React, { Component } from \"react\";\r\nimport CardList from \"../CardList/index\";\r\nimport Header from \"../Header\";\r\nimport Footer from \"../Footer\";\r\nimport characters from \"../../characters.json\";\r\nimport shuffle from \"../../utils/utility\";\r\n\r\nclass Content extends Component {\r\n  state = {\r\n    message: \"Click an image to begin!\",\r\n    messageStyle: {\r\n      color: \"deepskyblue\",\r\n      fontSize: \"35px\",\r\n      marginTop: \"auto\",\r\n      marginBottom: \"auto\"\r\n    },\r\n    styleChange: false,\r\n    newCharacters: [],\r\n    score: 0,\r\n    totalScore: 0,\r\n    imageStyle: {\r\n      animation: \"none\"\r\n    },\r\n    clicked: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    let temp = shuffle(characters).splice(-12);\r\n    this.setState({\r\n      newCharacters: temp\r\n    });\r\n    console.log(\"newCharacters\", this.state.newCharacters);\r\n  }\r\n\r\n  handleClick(event) {\r\n    event.preventDefault();\r\n\r\n    console.log(\"event\", event.target);\r\n    let tempClicked = this.state.clicked;\r\n    let tempScore = this.state.score + 1;\r\n    let newImageStyle = {\r\n      animation: \"none\"\r\n    };\r\n\r\n    this.setState({\r\n      imageStyle: newImageStyle\r\n    });\r\n\r\n    // First-time click?\r\n    if (this.state.clicked.indexOf(event.target.alt) === -1) {\r\n      // add to the array\r\n      this.setState({ clicked: tempClicked.concat(event.target.alt) });\r\n      this.setState({ score: tempScore });\r\n      this.setState({ message: \"Click an image to begin\" });\r\n\r\n      tempClicked = this.state.clicked;\r\n      if (tempClicked.length === 11) {\r\n        let temp = shuffle(characters).slice(-12);\r\n        let tempTotalScore = this.state.totalScore + 1;\r\n        // udpate states\r\n        this.setState({\r\n          newCharacters: temp\r\n        });\r\n        this.setState({ message: \"Click an image to begin\" });\r\n        this.setState({\r\n          messageStyle: {\r\n            color: \"deepskyblue\",\r\n            fontSize: \"35px\",\r\n            marginTop: \"auto\",\r\n            marginBottom: \"auto\"\r\n          },\r\n          styleChange: false\r\n        });\r\n        this.setState({ clicked: [] });\r\n        this.setState({ score: 0 });\r\n        this.setState({ totalScore: tempTotalScore });\r\n      } else {\r\n        let temp = shuffle(this.state.newCharacters);\r\n        this.setState({\r\n          newCharacters: temp\r\n        });\r\n      }\r\n    } else {\r\n      console.log(\"clicked already\");\r\n      this.setState({ message: \"Image already clicked!\" });\r\n      newImageStyle = {\r\n        animation: \"shake 0.5s\",\r\n        animationIterationCount: \"1\"\r\n      };\r\n\r\n      this.setState({\r\n        imageStyle: newImageStyle\r\n      });\r\n\r\n      this.setState({\r\n        messageStyle: {\r\n          color: \"red\",\r\n          fontSize: \"35px\",\r\n          marginTop: \"auto\",\r\n          marginBottom: \"auto\"\r\n        },\r\n        styleChange: true\r\n      });\r\n\r\n      setTimeout(() => {\r\n        this.setState({ message: \"Click an image to begin\" });\r\n        this.setState({\r\n          messageStyle: {\r\n            color: \"deepskyblue\",\r\n            fontSize: \"35px\",\r\n            marginTop: \"auto\",\r\n            marginBottom: \"auto\"\r\n          },\r\n          styleChange: false\r\n        });\r\n        this.setState({ clicked: [] });\r\n        this.setState({ score: 0 });\r\n      }, 1000);\r\n\r\n      let temp = shuffle(characters).slice(-12);\r\n      this.setState({\r\n        newCharacters: temp\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Header\r\n          title={\"Clicky Game\"}\r\n          message={this.state.message}\r\n          newMessageStyle={this.state.messageStyle}\r\n          styleChange={this.state.styleChange}\r\n          score={this.state.score}\r\n          totalScore={this.state.totalScore}\r\n        />\r\n\r\n        <main role=\"main\" className=\"container\">\r\n          <div className=\"row mb-5\"></div>\r\n          <div className=\"row mb-5\"></div>\r\n          <div className=\"row mb-5\"></div>\r\n          <div className=\"row mt-5\">\r\n            <div className=\"col\">\r\n              <CardList\r\n                chars={this.state.newCharacters}\r\n                handleClick={this.handleClick.bind(this)}\r\n                imageStyle={this.state.imageStyle}\r\n                messageStyle={this.state.messageStyle}\r\n              />\r\n            </div>\r\n          </div>\r\n        </main>\r\n\r\n        <Footer />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React from \"react\";\nimport Content from \"./components/Content\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}